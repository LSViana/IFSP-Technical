package JoaoSupermarket.View;

import javafx.fxml.FXML;
import javafx.scene.control.Label;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;
import JoaoSupermarket.MainApp;
import JoaoSupermarket.Model.*;
import JoaoSupermarket.Util.DateUtil;

public class WelcomeOverviewController {
	// TableView
	@FXML
	private TableView<Produto> produtoTabela;
	@FXML
	private TableColumn<Produto, String> produtoColuna;
	@FXML
	private TableColumn<Produto, String> categoriaColuna;
	// GridPane
	@FXML
	private Label produtoRotulo;
	@FXML
	private Label categoriaRotulo;
	@FXML
	private Label dataDeValidadeRotulo;
	@FXML
	private Label estoqueAtualRotulo;
	@FXML
	private Label estoqueMinimoAtualRotulo;
	// Reference to the Main Application
	private MainApp mainApp;
	// A standard constructor that is called before the initialize()
	public WelcomeOverviewController() {
		// Nothing here
	}
	/*
	 * Method to initialize the Controller class. This method is automatically called
	 * after the FXML file has been loaded.
	 */
	@FXML
	private void initialize() {
		// Initialize the Produto table with two columns
		produtoColuna.setCellValueFactory(cellData -> cellData.getValue().getNomeProperty());
		categoriaColuna.setCellValueFactory(cellData -> cellData.getValue().getCategoriaProperty());
		// Clear Product details
		mostrarDetalhesProduto(null);
		// Listen for selection changes and show the Product details when changed
		produtoTabela.getSelectionModel().selectedItemProperty().addListener(
				(observador, velhoValor, novoValor) -> mostrarDetalhesProduto(novoValor));
	}
	/*
	 * It's called by the main application to give back a reference to itself
	 */
	public void setMainApp(MainApp mainApp) {
		this.mainApp = mainApp;
		// Add ObservableList data to the TableView
		produtoTabela.setItems(mainApp.getProdutosDados());
	}

	/*
	 * Fills all text fields to show details about a Product
	 * If the Product passed as argument is null, all labels are cleared
	 */
	public void mostrarDetalhesProduto(Produto produto) {
		if(produto != null) {
			// Fill the labels with info from the produto object
			produtoRotulo.setText(produto.getNome());
			categoriaRotulo.setText(produto.getCategoria().toString());
			dataDeValidadeRotulo.setText(DateUtil.format(produto.getDataDeValidade()));
			estoqueAtualRotulo.setText(Integer.toString(produto.getEstoque()));
			estoqueMinimoAtualRotulo.setText(Integer.toString(produto.getEstoqueMinimo()));
		}
		else {
			// If the object is null, all labels are cleared
			produtoRotulo.setText("");
			categoriaRotulo.setText("");
			dataDeValidadeRotulo.setText("");
			estoqueAtualRotulo.setText("");
			estoqueMinimoAtualRotulo.setText("");
		}
	}
}
